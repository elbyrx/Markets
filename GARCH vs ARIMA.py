# -*- coding: utf-8 -*-
"""UE DS p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ITk0kxlt6y3E2KpePP_2cu4MXCbqjW1y
"""

! pip3 install pmdarima

! pip3 install arch

!pip install numpy scipy patsy pandas

import numpy as np
import pandas as pd
import pandas_datareader as pdr
import datetime as dt
import matplotlib.pyplot as plt

today = dt.date.today()
yesterday = today - dt.timedelta(days=1)
end_date = yesterday
start_date = dt.datetime(2015, 1, 1)

from google.colab import drive
drive.mount('/content/drive')

path = "/content/drive/MyDrive/Colab Notebooks/tsla_us_d.csv"
df = pd.read_csv(path, index_col='Data', parse_dates=True)

df['Zamkniecie'].plot(legend=True)
plt.title("WIG_20 Closing Prices")

df['MA_30'] = df['Zamkniecie'].rolling(30).mean()
df['MA_50'] = df['Zamkniecie'].rolling(50).mean()
df['MA_100'] = df['Zamkniecie'].rolling(100).mean()
plt.figure(figsize=(15,7))
plt.plot(df['Zamkniecie'], label='Price')
plt.plot(df['MA_30'], label="MA30")
plt.plot(df['MA_50'], label="MA50")
plt.plot(df['MA_100'], label="MA100")
plt.legend()

df['LN(r)'] = np.log(df['Zamkniecie']/df['Zamkniecie'].shift(1))
df = df.dropna()
df.describe
df.head

plt.figure(figsize=(15,7))
df['LN(r)'].plot(label=True)

df['LN(r)'].hist(bins=100, label = "LN(r)")
plt.legend()

import statistics as st
df.dropna(subset = ["LN(r)"], inplace=True)
stdevr = st.stdev(df['LN(r)'])
stpr = "{:.4%}". format(stdevr)
print('Standard Dev: ',stpr)

"""STACJONARNOŚĆ DANYCH"""

from statsmodels.tsa.stattools import adfuller

def ad_test(dataset):
  dftest = adfuller(dataset, autolag="AIC")
  print('1. ADF: ', dftest[0])
  print('2. p-value: ', dftest[1])
  print('3. num of lags: ', dftest[2])
  print('4. num of observ.: ', dftest[3])
  print('5. critical values: ')
  for key, val in dftest[4].items():
    print('\t', key, ':', val)

ad_test(df['LN(r)'])

from pmdarima import auto_arima

import warnings
warnings.filterwarnings('ignore')
from statsmodels.tsa.arima_model import ARIMA

"""P D Q - ARIMA"""

stepwise_fit = auto_arima(df['LN(r)'], trace=True, suppress_warnings=True)
stepwise_fit.summary()

"""PODZIAŁ DANYCH TRAIN/TEST"""

print(df.shape)
train=df.iloc[:-100]
test=df.iloc[-100:]
print(train.shape, test.shape)

model = ARIMA(train['LN(r)'], order=(2,0,2))
model = model.fit()
model.summary()

start = len(train)
end = len(train) + len(test)-1
pred = model.predict(start=start, end=end, typ='levels')
pred.index = df.index[start:end+1]
print(pred)

pred.plot(legend=True)
test['LN(r)'].plot(legend=True)

from sklearn.metrics import mean_squared_error
from math import sqrt
rmse = sqrt(mean_squared_error(pred,test['LN(r)']))
test_mean = test['LN(r)'].mean()
print('RMSE: ',rmse, 'Mean (test): ',test_mean)

model_2 = ARIMA(df['LN(r)'], order=(2,0,2))
model_2 = model_2.fit()

df['LN(r)'].tail()

index_forecast_dt = pd.date_range(start='2021-06-22', end='2021-09-30')
pred = model_2.predict(start=len(df), end=len(df)+100, typ='levels').rename('Forecast Log Return ARIMA')
pred.index = index_forecast_dt
print(pred)

pred.plot(figsize =(10,5) ,legend=True)

"""GARCH MODEL ESTIMATION"""

from arch import arch_model

model_GARCH = arch_model(df['LN(r)'],p=3, q=0)

model_GARCH_fit = model_GARCH.fit()

model_GARCH_fit.summary()

returns = df['LN(r)']

rolling_predictions = []
test_size1 = 365

for i in range(test_size1):
  train = returns[:-(test_size1-i)]
  model = arch_model(train, p=3, q=0)
  model_fit = model.fit(disp='off')
  pred = model_fit.forecast(horizon=1)
  rolling_predictions.append(np.sqrt(pred.variance.values[-1,:][0]))

rolling_predictions = pd.Series(rolling_predictions, index=returns.index[-365:])

plt.figure(figsize=(10,4))
true, = plt.plot(returns[-365:])
pred, = plt.plot(rolling_predictions)
plt.title('Prognoza zmienności', fontsize=20)
plt.legend(['Realne Stopy zwrotu','Prognozowane stopy zwrotu'], fontsize=16)



